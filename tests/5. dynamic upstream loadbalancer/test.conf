upstream upstream_balancer {
    server 0.0.0.1; # placeholder

    balancer_by_lua_block {
        local balancer = require "balancer";
        balancer.balance()
    }
}

http {
    # ...
    lua_package_path "./lua/?.lua;;";
    lua_shared_dict configuration_data 5M;
    # ...

    server {
        listen       80;
        server_name  www.test.com;

        # TODO: balancer.lua could use cjson decode more complicate data and do upstream balance
        # curl -d 'a' -X POST http://www.test.com/configuration
        # curl -d 'b' -X POST http://www.test.com/configuration

        location / {
            proxy_pass http://upstream_balancer/fake;
        }

        location /configuration {
            # this should be equals to posted configuration_data dict
            client_max_body_size                    10m;
            client_body_buffer_size                 10m;
            proxy_buffering                         off;

            content_by_lua_block {
              local configuration = require("configuration");
              configuration.call();
            }
        }
    }

    server {
        # this server is just for mocking up a backend (A) peer here...
        listen 127.0.0.1:8070;

        location = /fake {
            add_header Content-Type text/plain;
            echo "this is the fake backend peer A...";
        }
    }

    server {
        # this server is just for mocking up a backend (B) peer here...
        listen 127.0.0.1:8080;

        location = /fake {
            add_header Content-Type text/plain;
            echo "this is the fake backend peer B...";
        }
    }

    # ...
}

